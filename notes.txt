# 2023-03-08
- Pulled dogcow example out into separate function to preserve while other examples are created.
- Started creating a data type to store on the container element to keep track of template instantiation segments.
  - Unsure if it should be a tree structure or flat.
  - If it's flat it will be a tree structure anyway with parent pointers.
  - Should probably just be a tree, this makes subtree updates easier.
  - Keeping track of the span tree and where the span nodes exist as elements in the container is tricky.

# 2023-03-07
- Template types.
  - Came up with a few more types to support.
    - String: Needed for element children since they can be text nodes.
    - Function: Needed for reactive strings, should be able to support being any kind of template type.
    - Proxy: Shorthand for reading the proxy, should behave like a reactive string.
    - Array: Since branch template nodes can flat insert an arbitrary number of children it should also be possible with literals (not reading from a proxy), as in to hard code a list of templates to flat inject in as children.
    - Example usage:
      render(app, [
        'Dogs',
        htmlMap(model.dogs, dog => [
          read`Dog ${dog.name} is ${dog.size} big.`,
          htmlMap(dog.legs, leg => leg),
        ]),
      ]);
    - Full set of template types:
      - Singular:
        - Element
        - String
        - Proxy
      - Plural:
        - htmlIf
        - htmlSwitch
        - htmlMap
        - Array
        - Function
  - Plural types:
    - Inject their child templates into their parent's element, which may be their parent's parent's parent's element etc.
    - Need to be able to update their child templates in place amongst all the other flat mapped elements.
    - Function is probably the most general form of the plurals

# 2023-03-06
- Refactored ObservableJsonProxy to store all its internals in the handler and have a dummy object as the target instead.
  - The handler is now instantiated for each proxy rather than being shared.
  - This means the logic and data aren't split up and the handler and it can be written like a regular class.
  - Renamed the handler to be ProxyInternal.
  - Removed "internals" as a singular term as it made having sets of ProxyInternals difficult to name.
  - Made Watcher contain a set of ProxyInternals rather than a set of Proxies, it had no need for the outer Proxy object.
- Split obserable-json.js file in two sections, public and private.
- Started attempting to implement htmlMap.
  - Added childrenLog to container element to track what index the htmlMap child nodes start at and how many there are.
  - Can be used to replace existing children with new ones later when watch() retriggers.
  - Ran into problem, htmlMap's child templates could be more htmlMaps.
  - Need to represent this nested structure somehow to ensure the nested maps get cleaned up properly.

# 2023-03-05
- Removed global notifyingWatchers and notifyingWatchersWaitingRoom in favour of resetting the internals.watchers and saving the set to iterate over as a local variable.
  - Not 100% sure it's okay to clear the internals.watchers here but it probably should be okay.
  - Much better than having those two globals used in 3 places.
  - No this adds a bug. When watchers are removed from the proxy they won't be removed from the notifyingWatchers set.
  - Maybe just need to pop from this set instead of looping over it.
    - Implemented this.
- Added TS types for observable-json.js.
- Project name idea: Render Observable JSON (ROJ).
  - Renamed rendering.js to render.js to match.
- Fixed up naming of proxy internals for consistency.
- Removed the lockAccessing() and lockMutating calls in render(), it would be nice to have but eh, it's nicer to avoid the layering and having to have two functions named so similarly. Add it back if it's really needed.
  - No more lock on accessing anymore, deleted that code.
  - Inlined lockMutating() into watch() and notifyWatchers(), no more lock methods.
- Made render() handle all template values, not just element templates.
  - Make it append the template to the container element.
- Managing containers' templated children.
  - Add an internal value to the element to track the range of children that different child templates manage.
  - As child templates are rerendered they can use this data to remove/re-order the children they originally appended.
- Removed the use of popKeys(), it was mutating the original template which would bite us later as we try to re-render these templates.
- Implemented waiting until the next animation before notifying watchers.

# 2023-02-27 Monday
- Added watcher tree view.
- Added notify count to proxies and run count to watchers for debug print.
- Confirmed mutations on proxies that used to be watched doesn't notify anything and shouldn't run UI mutating code once hooked up with rendering.

# 2023-02-23 Thursday
- Split up the reactive code.
  - Pulled JSON observation into observable-json.js, includes reading, mutation and watching.
  - Pulled rendering into rendering.js that mainly calls watch().
- Implemented generic nested watching.
  - Seem to need fancy htmlBranches to test it with DOM.
  - Can test it out on just style though.
  - Made dog cow style demo, seems to work.
    - Oops it doesn't work, I read the values in the style object creation function instead of making the property values nested functions themselves.
    - Adding actual watch nesting shows it doesn't work, the watchers accumulate infinitely and old watchers erroneously execute. They're not removing properly.
- Created debug output to monitor number of watchers.

# 2023-02-21 Tuesday
- Created helper function watch().
  - Takes two parameters:
    - A readingValue which may be a JSON proxy to be read, a function that read()s a proxy object or a normal value.
    - A setter function that's called whenever the readingValue is evaluated.
  - The readingValue gets re-evaluated whenever a mutation happens on anything it read().
  - Registers the setter as a write observer for any proxy value that gets read.
  - Noticed a generalisation over htmlBranch observations.
    - This applies to the style property on an element, the style value could be a function and so could the inner style property values.
    - The inner style property values are dependent on the outer style value computation and need to be wiped if the outer computation gets redone.
    - The generalisation is in nested calls to watch() within the setter function.
    - This is a primitive of the JSON proxy separate to HTML rendering.
    - This is very similar to an effect in Solid JS, not sure if effects can be nested.

# 2023-02-16 Thursday
- Render observation updating.
  - HTML render output is a tree.
    - Not of DOM nodes, more fine grained, nodes are the values on the DOM elements themselves as well as child DOM nodes.
    - E.g. the value of CSS properties and XML attributes in addition to the DOM children.
  - Nested content with nested observations.
  - Every observation corresponds to a node in the tree getting re-rendered and replacing the previous node.
  - Need to ensure observation notifications happen top down in the tree.
    - Natural DFS registration is probably fine?
  - How do element events work with model observer registration?
    - Hopefully fine to just replace them whenever they update like any other render tree node.
  - The entire subtree needs cleaning up on re-render.
    - Need to be able to wipe those inner observers so they don't fire if they're listening to the same thing.
      - Need data structure of observers on model to reflect render tree.
      - Maybe model points back to template nodes?
- What does branching look like in the template?
  - Need if, switch and map (list and dict).
  - Element is {...}.
  - Branch point can be class instance.
    - htmlIf(condition, trueBranch, falseBranch=null);
    - htmlSwitch(value, { value: branch, ... });
    - htmlList(list, item => branch);
      - Filters on the list?
      - sort, map, filter.
    - htmlMap(object, ([key, value]) => branch);
  - Example:
    const model = createObservableJson({
      mode: 'pony',
      ponies: [{
        name: 'twigl',
        attack: 100,
      }, {
        name: 'flutpants',
        attack: 300,
        thievery: 86,
      }],
      barks: 6,
    });
    render(container, () => group(
      h1(() => capitalise(read(model.mode)), ' mode'),
      htmlSwitch(model.mode, {
        pony: group(
          group('You are ambushed by ', model.ponies.length, ' ponies.'),
          htmlList(model.ponies, pony => group(
            group(pony.name, ' hits you for ', pony.attack, ' damage.'),
            htmlIf(
              () => (read(pony.thievery) ?? 0) > 0,
              group(pony.name, ' steals ', pony.thievery, ' coins.'),
            ),
          ),
        ),
        dog: group(
          'Dog go ',
          () => 'bark '.repeat(read(model.barks)),
        ),
      }
    ));
  - And again with $ at the start of each observation/rerender point:
    render(container, () => group(
      h1($ () => capitalise(read(model.mode)), ' mode'),
      $ htmlSwitch(model.mode, {
        pony: group(
          group('You are ambushed by ', $ model.ponies.length, ' ponies.'),
          $ htmlList(model.ponies, pony => group(
            group($ pony.name, ' hits you for ', $ pony.attack, ' damage.'),
            $ htmlIf(
              () => (read(pony.thievery) ?? 0) > 0,
              group($ pony.name, ' steals ', $ pony.thievery, ' coins.'),
            ),
          ),
        ),
        dog: group(
          'Dog go ',
          $ () => 'bark '.repeat(read(model.barks)),
        ),
      }
    ));
  - Rerender points appear at every model proxy, lambda and htmlBranch node.
  - Rerender observation tree for the active model:
    $0 model.mode
    $1 model.mode
      $2 model.ponies.length
      $3 model.ponies
        $4 model.ponies[0]
          $5 model.ponies[0].name
          $6 model.ponies[0].attack
          $7 model.ponies[0].thievery
        $8 model.ponies[1]
          $9 model.ponies[1].name
          $10 model.ponies[1].attack
          $11 model.ponies[1].thievery
            $12 model.ponies[1].name
            $13 model.ponies[1].thievery
  - thievery is used at two levels in ponies[1], $11 and $13.
  - Changes to $11 should wipe out $13 since that render node will be rerendered entirely and a new observation will be established.
  - How to structure the observation registrations to enable render subtree clearing?
  - Model tree with observations:
    const model = createObservableJson({
      mode: 'pony', $0 $1
      ponies: [ $3
        { $4
          name: 'twigl', $5
          attack: 100, $6
          thievery: undefined, $7
        }, { $8
          name: 'flutpants', $9 $12
          attack: 300, $10
          thievery: 86, $11 $13
        }
      ],
      barks: 6,
    });
  - Perhaps the observations at each model node can be its own tree and invoking each one returns whether to wipe the subtree or invoke it.
    - The problem with this is the observation subtree can be for different points in the model rather than the one being mutated.
    - A mutation at one point in the model tree needs to clear observations of a different part of the model tree based on the observation tree.
    - The observation tree is like a less granular version of the render tree.
    - How best to wipe the subtree of observations from the model?
      - Maybe start with an expensive solution for now. Store lots of references to observations everywhere.
        - Model with heavy weight observation data where $n{$a, $b, $c} is an observation $n with references to its immediate subtree children $a, $b, $c:
          const model = createObservableJson({
            mode: 'pony', $0{} $1{$2, $3}
            ponies: [ $3{$4, $8}
              { $4{$5, $6, $7}
                name: 'twigl', $5{}
                attack: 100, $6{}
                thievery: undefined, $7{}
              }, { $8{$9, $10, $11}
                name: 'flutpants', $9{} $12{}
                attack: 300, $10{}
                thievery: 86, $11{$12, $13} $13{}
              }
            ],
            barks: 6,
          });
        - When a model node mutates it invokes its observations which return whether to wipe the sub observations from the rest of the model.
          - It may not wipe e.g. for an htmlIf condition that doesn't change its value even though the model it reads from changes e.g. htmlIf(() => read(model.value) > 10) is true/false for many values.
        - Either the sub observation references will need to point to the proxy on which the observations live or all observations have a back link to the proxy on which they live.
        - When there are multiple batched mutations at the same time how to know which observation to trigger first?
          - Want to trigger the highest one.
            - Maybe doesn't have to be highest of them all, just has to be a root, any root, probably.
          - Perhaps observation references need back links to the observation referencing them.
          - Do all observations have only one parent referencing observation? Probably, due to tree shape of observations.
          - All htmlBranch observations are what define subtrees of other observations as they are the only thing that can cause a render branch to be deleted/replaced.

# 2023-02-10 Friday
- Goal: Solid JS but with JS DOM API instead of XML parsing and with signals being entire JSON objects that can be observed at any inner level.
